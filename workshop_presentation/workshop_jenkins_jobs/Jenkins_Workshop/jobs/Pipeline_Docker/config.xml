<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1282.ve6d865025906">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3641.vf58904a_b_b_5d8">
    <script>pipeline {
    
    agent {
        label &apos;cicd3_win_nhd2322w&apos;
    }
    
    // agent {
    //     docker { 
    //         image &apos;maven:3-alpine&apos;
    //         // label &apos;my-defined-label&apos;
    //         // args  &apos;-v /tmp:/tmp&apos;
    //     }
    // }
    
    
    environment {
        CUSTOM_WS = &quot;c:\\sindri_automation\\sindri_webPortal&quot;
        REGISTRY = &apos;nsamardzic/python_selenium_chrome:chrome-91&apos;
        // REGISTRY_CREDENTIALS = &quot;docker_webPortal_key&quot;
        REGISTRY_CREDENTIALS = credentials(&apos;docker_webPortal_key&apos;)
        DOCKER_IMAGE = &apos;nsamardzic/python_selenium_chrome:chrome-91&apos;
        DOCKER_CONTAINER = &quot;sindri_webPortal_chrome&quot;
    }
    
    
    stages {
        
        stage(&apos;Docker image&apos;) {
            steps {
                script {
                    // DOCKER_IMAGE = docker.build REGISTRY
                    // DOCKER_IMAGE.pull()
                    withDockerContainer(&apos;nsamardzic/python_selenium_chrome&apos;) {
                    // some block
                        sh &quot;docker run --name nsamardzic/python_selenium_chrome --rm -p 8082:8080 jenkins:jcasc&quot;
                    }
                }
            }
        }
        
        
        // stage(&apos;Pull latest version of Docker image&apos;) {
        //     steps {
        //         script {
        //             docker.withRegistry(&apos;&apos;, REGISTRY_CREDENTIALS) {
        //                 DOCKER_IMAGE.pull()
        //             }
        //         }
        //     }
        // }
        
        // stage(&apos;Docker pull&apos;) {
            
        //     steps {
        //         script {
        //             DOCKER_IMAGE.pull()
        //         }
        //     }
            
        // }
        
        
        
        // stage(&apos;Docker init&apos;) {
            
        //     // agent {
        //     //     docker { 
        //     //         // image &apos;maven:3-alpine&apos;
        //     //         image &apos;node:7-alpine&apos;
        //     //     }
        //     // }
            
            
            
        //     steps {
        //         script {
        //             dir(&quot;$env.CUSTOM_WS&quot;) {
        //                 DOCKER_IMAGE.pull()
        //                 // echo &apos;whoami&apos;
        //                 // bat &apos;ls -l&apos;
        //                 // sh (&quot;docker build --rm --build-arg JOB_NAME=${sanitisedJobName()} -t ${containerName()} .&quot;)
        //                 // sh &apos;mvn -B clean faric8:build faric8:deploy verify&apos;
        //                 // dockerImage.run(&quot;--publish 9005:9005 --rm -t --detach --name dcl_container33&quot;)
        //             }
        //         }
        //     }
            
            
            
        // }
        
        
    }
    
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>