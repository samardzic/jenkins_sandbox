pipeline {
    
    agent {
        label 'windows'
    }
    
    
    environment {
        // Test Suite default = "webPortal" [webPortal, emailTests, smoke, billing, integrationTests, jnkTest]
        TEST_SUITE = "webPortal"
        
        // Envinronment default="cicd" [vv, dev, cicd, cicd_api]
        TEST_ENVIRONMENT = "vv"
        
        // TEST_USER default="user_main" [user_main, user_jenkins, user_dragana, user_nenad, user_maja]
        TEST_USER = "user_main"
        
        // TEST_BROWSER default="chrome" [chrome, firefox, safari, ie, edge]
        TEST_BROWSER = "firefox"
        
        // GIT branch [main, development]
        GIT_WP_BRANCH = "development"
        GIT_REPO = "https://github.geo.conti.de/CVAM/Sindri-WebPortal-Automation.git"
        
        PROJECT_ROOT_PATH = "c:\\sindri_automation"
        ROOT_PATH = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        CUSTOM_WS = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        DOCKER_IMAGE = "nsamardzic/sindri_python_geckodriver"
        DOCKER_CONTAINER = "sindri_selenium_geckodriver"
        DOCKERFILE_PATH = "C:\\sindri_automation"
        DOCKERFILE_NAME = "sindri_docker_firefox.Dockerfile"
        REPORT_FILE_NAME = "webPortal_report_docker.html"
        REPORT_TITLE = "Sindri_WebPortal_Docker_Firefox"
        DOCKER_REPORT_DIR = "/Sindri-WebPortal-Automation/reports/html_reports"
        REPORT_DIRECTORY = "c:\\sindri_automation\\Sindri-WebPortal-Automation\\reports\\html_reports\\"
        
        GIT_WP_USERNAME  = credentials('WP_Docker_Git_UserName_ID')
        GIT_WP_PASSWORD  = credentials('WP_Docker_Git_Password_ID')
    }
    
    
    stages{
        
        
        
        
        stage('Clean Workspace') {
            steps {
                script{
                    try {
                        cleanWs(cleanWhenNotBuilt: false,
                                deleteDirs: true,
                                disableDeferredWipeout: true,
                                notFailBuild: true,
                                patterns: [
                                    [pattern: '.gitignore', type: 'INCLUDE'],
                                    [pattern: '.propsfile', type: 'EXCLUDE']])
                    } catch (err) {
                        echo 'Clean Workspace Failed'
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
        
        
        
        
        stage('List Docker elements') {
            steps {
                script{
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat 'docker images'
                            bat 'docker ps -a'
                        } catch (err) {
                            echo 'Docker elements listing Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        stage('Stop All docker containers'){
            steps{
                script{
                    dir("$env.CUSTOM_WS") {
                        containers_all = powershell(
                            returnStdout: true, script: 'docker container ps -aq').trim()
                        containers = containers_all.readLines().join(" ")
                        if (containers) {
                            bat "docker stop ${containers}"
                        }
                    }
                }
            }
        }
        
        
        
        stage('Remove project specific docker containers'){
            steps{
                script{
                    dir("$env.CUSTOM_WS") {
                        containers_all = powershell(
                            returnStdout: true, script: 'docker container ps -aq --filter ancestor=\$env:DOCKER_IMAGE').trim()
                        containers = containers_all.readLines().join(" ")
                        if (containers) {
                            bat "docker rm ${containers}"
                        }
                    }
                }
            }
        }
        
        
        
        
        
        stage('Remove project specific docker Images'){
            steps{
                script{
                    dir("$env.CUSTOM_WS") {
                        images_all = powershell(
                            returnStdout: true, script: 'docker images -q $env:DOCKER_IMAGE').trim()
                        images = images_all.readLines().join(" ")
                        if (images) {
                            bat "docker rmi ${images}"
                        }
                    }
                }
            }
        }
        
        
        
        stage('Build Docker image') {
            steps {
                script{
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                docker build \
                                    --file ${env.DOCKERFILE_PATH}\\${env.DOCKERFILE_NAME} \
                                    --tag ${env.DOCKER_IMAGE} . \
                                    --build-arg GIT_USERNAME=${env.GIT_WP_USERNAME} \
                                    --build-arg GIT_PASSWORD=${env.GIT_WP_PASSWORD} \
                                    --build-arg GIT_BRANCH=${env.GIT_WP_BRANCH} \
                                    --compress
                            """
                        } catch (err) {
                            echo 'Docker image Build Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        stage('Docker Run') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                docker run -t --detach --name ${env.DOCKER_CONTAINER} ${env.DOCKER_IMAGE}
                                docker ps -a
                                docker images
                                """
                        } catch (err) {
                            echo 'Docker Run Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        stage('Execute Test Suite') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                docker exec -w /Sindri-WebPortal-Automation ${env.DOCKER_CONTAINER} \
                                pytest \
                                    --reruns 1 --reruns-delay 5 \
                                    -m ${env.TEST_SUITE} \
                                    --browser=${env.TEST_BROWSER} \
                                    --env=${env.TEST_ENVIRONMENT} \
                                    --user=${env.TEST_USER} \
                                    --self-contained-html \
                                    --html=${env.DOCKER_REPORT_DIR}/${env.REPORT_FILE_NAME} \
                                    -n 3 \
                                    --dist loadgroup
                                """
                        } catch (err) {
                            echo 'Test Suite Execution Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        
        stage('Extract text execution report') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                docker cp ${env.DOCKER_CONTAINER}:${env.DOCKER_REPORT_DIR}/${env.REPORT_FILE_NAME} ${env.REPORT_DIRECTORY}
                                """
                        } catch (err) {
                            echo 'Execution report extraction Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        stage('Publish HTML report') {
            steps {
                script {
                    try {
                        publishHTML([
                            allowMissing: false, 
                            alwaysLinkToLastBuild: false, 
                            keepAll: true, 
                            reportDir: "$env.REPORT_DIRECTORY", 
                            reportFiles: "$env.REPORT_FILE_NAME", 
                            reportName: "Sindri_WebPortal_Firefox_Report", 
                            reportTitles: "$env.REPORT_TITLE"
                        ])
                        echo 'HTML report Publish SUCCESS'
                    } catch (err) {
                        echo 'HTML report Publish FAILED'
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
        
        
        
        
        
        
        
        
    }
    
}