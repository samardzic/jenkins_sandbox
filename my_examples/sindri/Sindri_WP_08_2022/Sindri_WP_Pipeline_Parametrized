pipeline {
    // agent {
    //     label 'windows'
    // }
    agent any
    
    environment {
        PROJECT_ROOT_PATH = "c:\\sindri_automation"
        ROOT_PATH = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        CUSTOM_WS = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        GIT_REPO = "https://github.geo.conti.de/CVAM/Sindri-WebPortal-Automation.git"

        REPORT_FILE_NAME = "webPortal_report.html"
        REPORT_TITLE = "Sindri_WebPortal_VV_report"
        REPORT_DIRECTORY = "c:\\sindri_automation\\Sindri-WebPortal-Automation\\reports\\html_reports\\"
    }
    
    
    parameters {
        choice(
            name: "TEST_SUITE", choices: ['webPortal', 'emailTests', 'smoke', 'billing', 'integrationTests', 'jnkTest'],
            description: 'Available TEST SUITES for test execution')
        choice(
            name: "GIT_BRANCH", choices: ['main', 'development', 'refactoring_1', 'refactor_2'],
            description: 'Available TEST SUITES for test execution')
        choice(
            name: "TEST_ENVIRONMENT", choices: ['vv', 'cicd', 'dev', 'cicd_api'],
            description: 'Available TEST ENVIRONMENTS for test execution')
        choice(
            name: "TEST_USER", choices: ['user_main', 'user_jenkins', 'user_dragana', 'user_nenad', 'user_maja'],
            description: 'Available USERS for test execution')
            
            
        // string(name: "TESTs", defaultValue: "example text", description: "This is for TEST_STRING") 
        // text(name: "Something", defaultValue: "One\nTwo\nThree\n", description: "This is for TEST_TEXT")
        // booleanParam(name: "TEST_BOOLEAN", defaultValue: true, description: "This is for TEST_BOOLEAN")
        // choice(name: "LOCATION", choices: ["one1", "two2", "three3"], description: "This is TEST_CHOICE")
        // password(name: "TEST_PASSWORD", defaultValue: "SECRET", description: "This is TEST_PASSWORD")
    }
    
    stages{
        
        
        
        stage('Checkout to specific branch') {
             options {
                timeout(time: 120, unit: 'SECONDS')
            }
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                cd ${env.ROOT_PATH}
                                git reset --hard
                                git clean -f -d
                                git fetch
                                git checkout ${params.GIT_BRANCH}
                                git pull origin ${params.GIT_BRANCH}
                            """
                        } catch (err) {
                            echo 'SVN pull Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
                    
            }
        }
        
        
        
        
        
        stage('Run preconfigured Test Suite') {
            // options {
            //     timeout(time: 2, unit: 'HOURS')
            // }
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                    // dir("$params.LOCATION") {
                        try {
                            bat """
                                call ${env.ROOT_PATH}\\venv\\Scripts\\activate.bat
                                cd ${env.ROOT_PATH}
                                ${env.ROOT_PATH}\\venv\\Scripts\\pytest -m ${params.TEST_SUITE} --env=${params.TEST_ENVIRONMENT} --user=${params.TEST_USER} -n 3
                            """
                            echo 'Test Suite execution initiated.'
                        } catch (err) {
                            echo 'Test Suite execution failed to start'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                    
                }
            }
        }
        
        
        
        
        stage('Publish HTML report') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            sleep(time:3, unit:'SECONDS')
                            publishHTML([
                                allowMissing: false, 
                                alwaysLinkToLastBuild: false, 
                                keepAll: true, 
                                reportDir: "$env.REPORT_DIRECTORY", 
                                reportFiles: "$env.REPORT_FILE_NAME", 
                                reportName: "Sindri_WebPortal_VV_report", 
                                reportTitles: "$env.REPORT_TITLE"
                            ])
                            echo 'HTML report Publish SUCCESS'
                        } catch (err) {
                            echo 'HTML report Publish FAILED'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        
    }
    
}