pipeline {
    // agent {
    //     label 'windows'
    // }
    agent any
    
    environment {
        PROJECT_ROOT_PATH = "c:\\sindri_automation"
        ROOT_PATH = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        CUSTOM_WS = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        
        // Test Suite default = "webPortal" [webPortal, emailTests, smoke, billing, integrationTests]
        // TEST_SUITE = '"webPortal or emailTests"'
        TEST_SUITE = "webPortal"
        
        // Envinronment default="cicd" [vv, dev, cicd, cicd_api]
        TEST_ENVIRONMENT = "vv"
        
        // TEST_USER default="user_main" [user_main, user_jenkins, user_dragana, user_nenad, user_maja]
        TEST_USER = "user_nenad"
        
        // TEST_BROWSER default="chrome" [chrome, firefox, safari, ie, edge]
;       TEST_BROWSER = "chrome"
        
        // GIT branch [main, development, refactoring_1, refactor_2, sindri_framework_v1]
        GIT_BRANCH = "development"
        GIT_REPO = "https://github.geo.conti.de/CVAM/Sindri-WebPortal-Automation.git"

        REPORT_FILE_NAME = "webPortal_report.html"
        REPORT_TITLE = "Sindri_WebPortal_VV_report"
        REPORT_DIRECTORY = "c:\\sindri_automation\\Sindri-WebPortal-Automation\\reports\\html_reports\\"
    }
    
    stages{
        
        
        
        stage('Checkout to specific branch') {
             options {
                timeout(time: 120, unit: 'SECONDS')
            }
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                cd ${env.ROOT_PATH}
                                git reset --hard
                                git clean -f -d
                                git fetch
                                git checkout ${env.GIT_BRANCH}
                                git pull origin ${env.GIT_BRANCH}
                            """
                        } catch (err) {
                            echo 'SVN pull Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
                    
            }
        }
        
        
        
        
        
        stage('Run preconfigured Test Suite') {
            // options {
            //     timeout(time: 2, unit: 'HOURS')
            // }
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                call ${env.ROOT_PATH}\\venv\\Scripts\\activate.bat
                                cd ${env.ROOT_PATH}
                                ${env.ROOT_PATH}\\venv\\Scripts\\pytest \
                                --reruns 1 --reruns-delay 5 \
                                -m ${env.TEST_SUITE} \
                                --browser=${env.TEST_BROWSER} \
                                --env=${env.TEST_ENVIRONMENT} \
                                --user=${env.TEST_USER}
                            """
                            echo 'Test Suite execution initiated.'
                        } catch (err) {
                            echo 'Test Suite execution failed to start'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                    
                }
            }
        }
        
        
        
        
        stage('Publish HTML report') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            sleep(time:3, unit:'SECONDS')
                            publishHTML([
                                allowMissing: false, 
                                alwaysLinkToLastBuild: false, 
                                keepAll: true, 
                                reportDir: "$env.REPORT_DIRECTORY", 
                                reportFiles: "$env.REPORT_FILE_NAME", 
                                reportName: "Sindri_WebPortal_VV_report", 
                                reportTitles: "$env.REPORT_TITLE"
                            ])
                            echo 'HTML report Publish SUCCESS'
                        } catch (err) {
                            echo 'HTML report Publish FAILED'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        
    }
    
}