pipeline {
    agent {
        label 'cicd3_win_nhd2322w'
    }
    
    
    parameters {
        booleanParam(
            name: "SEND_EXECUTION_RESULTS", 
            defaultValue: false, 
            description: "Sending email containing test execution report.")
        booleanParam(
            name: "PUBLISH_API_LOGS", 
            defaultValue: false, 
            description: "Publish API logs generated during execution.")
    }
    
    
    environment {
        PROJECT_ROOT_PATH = "c:\\sindri_automation"
        ROOT_PATH = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        CUSTOM_WS = "$env.PROJECT_ROOT_PATH\\Sindri-WebPortal-Automation"
        VENV_PATH = "$env.ROOT_PATH\\venv\\Scripts"
        
        // Test Suite default = "webPortal" [webPortal, emailTests, smoke, billing, integrationTests, jnkTest, webShop, deleteAPI]
        TEST_SUITE = "webPortal"

        // Envinronment default="cicd" [vv, dev, cicd, cicd_api]
        TEST_ENVIRONMENT = "vv"
        
        // TEST_USER default="user_main" [user_main, user_jenkins, user_dragana, user_nenad, user_maja]
        TEST_USER = "user_main"
        
        // TEST_BROWSER default="chrome" [chrome, firefox, safari, ie, edge]
        TEST_BROWSER = "chrome"
        
        // GIT branch [main, development, active_dev]
        GIT_BRANCH = "active_dev"
        GIT_REPO = "https://github.geo.conti.de/CVAM/Sindri-WebPortal-Automation.git"

        REPORT_FILE_NAME = "webPortal_report.html"
        REPORT_TITLE = "Sindri_WebPortal_VV_report"
        REPORT_DIRECTORY = "c:\\sindri_automation\\Sindri-WebPortal-Automation\\reports\\html_reports"
        
        LOG_FILE_NAME = "test_log.zip"
        LOG_TITLE = "Test logs"
        LOG_DIRECTORY = "c:\\sindri_automation\\Sindri-WebPortal-Automation\\reports\\"
        CLEAN_UP_JOB = "Explore_Automation"

    }
    
    stages{
        
        
        stage('Execute data clean-up Job') {
            steps {
                build job: "$env.CLEAN_UP_JOB", wait: true
            }
        }
        
        
        
        stage('Checkout to specific branch') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                cd ${env.ROOT_PATH}
                                git reset --hard
                                git clean -f -d
                                git fetch
                                git checkout ${env.GIT_BRANCH}
                                git pull origin ${env.GIT_BRANCH}
                            """
                        } catch (err) {
                            echo 'SVN pull Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
                    
            }
        }
        
        

        stage('Install project requirements') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                ${env.VENV_PATH}\\pip install -r ${env.ROOT_PATH}\\requirements_311.txt
                                ${env.VENV_PATH}\\pip list
                            """
                        } catch (err) {
                            echo 'Requirements install Failed'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
                    
            }
        }

        
        
        
        stage('Run preconfigured Test Suite') {
            // options {
            //     timeout(time: 2, unit: 'HOURS')
            // }
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            bat """
                                call ${env.ROOT_PATH}\\venv\\Scripts\\activate.bat
                                cd ${env.ROOT_PATH}
                                ${env.ROOT_PATH}\\venv\\Scripts\\pytest \
                                --reruns 1 --reruns-delay 5 \
                                -m ${env.TEST_SUITE} \
                                --browser=${env.TEST_BROWSER} \
                                --env=${env.TEST_ENVIRONMENT} \
                                --user=${env.TEST_USER} \
                                --html=${env.REPORT_DIRECTORY}\\webPortal_vv_report.html \
                                -n 3 \
                                --headless \
                                --dist loadgroup
                            """
                            echo 'Test Suite execution initiated.'
                        } catch (err) {
                            echo 'Test Suite execution failed to start'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                    
                }
            }
        }
        
        
        
        
        stage('Send execution results') {
            options {
                timeout(time: 80, unit: 'SECONDS')
            }
            
            when {
                expression{params.SEND_EXECUTION_RESULTS == true}
            }
            
            steps {
                script {
                    try {
                        sleep(time:10, unit:'SECONDS')
                        bat """
                            c:\\sindri_automation\\Sindri-WebPortal-Automation\\venv\\Scripts\\python \
                            c:\\sindri_automation\\Sindri-WebPortal-Automation\\tests\\email_tests\\send_email_results_company_account.py
                        """
                        echo 'Test execution results sent.'
                    } catch (err) {
                        echo 'Test execution results sending failed'
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
        
        
        
        
        stage('Publish HTML report') {
            steps {
                script {
                    dir("$env.CUSTOM_WS") {
                        try {
                            sleep(time:3, unit:'SECONDS')
                            publishHTML([
                                allowMissing: false, 
                                alwaysLinkToLastBuild: false, 
                                keepAll: true, 
                                reportDir: "$env.REPORT_DIRECTORY", 
                                reportFiles: "webPortal_vv_report.html", 
                                reportName: "Sindri_WebPortal_VV_report", 
                                reportTitles: "$env.REPORT_TITLE"
                            ])
                            echo 'HTML report Publish SUCCESS'
                        } catch (err) {
                            echo 'HTML report Publish FAILED'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        
        stage('Publish api logs') {
            
            when {
                expression{params.PUBLISH_API_LOGS == true}
            }
            
            steps {
                script {
                    dir("$env.LOG_DIRECTORY") {
                        try {
                            sleep(time:3, unit:'SECONDS')
                            bat "tar.exe -a -cf test_log.zip log_data"
                            publishHTML([
                                allowMissing: false, 
                                alwaysLinkToLastBuild: false, 
                                keepAll: true, 
                                reportDir: "$env.LOG_DIRECTORY", 
                                reportFiles: "$env.LOG_FILE_NAME", 
                                reportName: "Test Logs", 
                                reportTitles: "$env.LOG_TITLE"
                            ])
                            echo 'API logs Publish SUCCESS'
                        } catch (err) {
                            echo 'API logs Publish FAILED'
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                }
            }
        }
        
        
        
        
        
        
    }
    
}